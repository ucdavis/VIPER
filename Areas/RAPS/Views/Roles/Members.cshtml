
<h2>Members of {{role.role}}</h2>
<q-btn href="/RAPS" icon="arrow_back" label="Roles" class="q-mb-md"></q-btn>
<div style="max-width:400px;" class="q-mb-md">
    <div>
        <span>{{roleMemberForm.editing ? "Edit" : "Create"}} Role Member</span>
        <q-form @@submit="editRoleMember" v-bind="roleMemberForm">
            <q-select outlined dense use-input input-debounce="300"
                label="User" 
                v-model="roleMemberForm.member"  
                @@filter="memberSearch" 
                :options="memberSearchResults" 
                :readonly="roleMemberForm.editing">
            </q-select>
            <q-input type="date" outlined dense v-model="roleMemberForm.startDate" label="Start Date"></q-input>
            <q-input type="date" outlined dense v-model="roleMemberForm.endDate" label="End Date"></q-input>
            <q-input outlined dense v-model="roleMemberForm.comment" label="Comment"></q-input>
            <q-btn label="Submit" type="submit" color="primary" class="q-mr-lg q-mt-md"></q-btn>
            <q-btn label="Clear" type="button" @@click="clearRoleMember" color="primary" class="q-mt-md" v-if="roleMemberForm.editing"></q-btn>
            <q-btn label="Delete" type="button" @@click="deleteRoleMember" color="red" class="q-ml-lg q-mt-md" v-if="roleMemberForm.editing"></q-btn>
        </q-form>
    </div>
</div>
    
<q-table title="Members"
            dense
            row-key="memberId"
            :loading="roleMembersLoading"
            :rows="roleMembers"
            :columns="rolesmembersColumns"
            :filter="roleMembersFilter"
            :pagination="roleMembersPagination">
    <template v-slot:top-right="props">
        <q-input class="q-ml-xs q-mr-xs" v-model="roleMembersFilter" dense outlined debounce="300" placeholder="Filter Results">
            <template v-slot:append>
                <q-icon name="filter_alt" />
            </template>
        </q-input>
    </template>
    <template v-slot:body-cell-memberid="props">
        <q-td :props="props">
            <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="dataset" :href="'RSOP/?MemberId=' + props.row.memberId"></q-btn>
            <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="security" :href="'MemberRoles/?RoleId=' + props.row.memberId"></q-btn>
            <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="lock" :href="'MemberPermissions/?RoleId=' + props.row.memberId"></q-btn>
        </q-td>
    </template>
    <template v-slot:body-cell-actions="props">
        <q-td :props="props">
            <q-btn :props="props" size="md" color="primary" @@click="selectForEdit(props)">Edit</q-btn>
        </q-td>
    </template>
</q-table>

@section Scripts {
    <script asp-add-nonce="true">
        //form
        vueObjects.roleId = 0
        vueObjects.role = {}
        vueObjects.memberSearchResults = []
        vueObjects.selectedRoleMember = {}
        vueObjects.roleMemberForm = {editing: false}
        //table
        vueObjects.roleMembers = []
        vueObjects.roleMembersLoading = true
        vueObjects.roleMembersPagination = { rowsPerPage: 0 }
        vueObjects.roleMembersFilter = "";
        vueObjects.rolesmembersColumns = [
            { name: "memberid", label: "", field: "memberId", align: "left", style: "width:75px;" },
            { name: "member", label: "Member", field: "memberName", align: "left", sortable: true },
            { name: "adddate", label: "Add Date", field: "addDate", align: "left", sortable: true, format: v => formatDate(v) },
            { name: "startdate", label: "Start Date", field: "startDate", align: "left", sortable: true, format: v => formatDate(v) },
            { name: "enddate", label: "End Date", field: "endDate", align: "left", sortable: true, format: v => formatDate(v) },
            { name: "lastmodified", label: "Last Modified", field: "lastModified", align: "left", sortable: true },
            { name: "active", label: "Active", field: "active", align: "left", sortable: true },
            { name: "actions", label: "Actions", field: "", align: "left", sortable: false }
        ]

        formatDate = function(d) {
            var dt = new Date(d)
            return (d && d != "" && dt instanceof Date && !isNaN(dt.valueOf())) ? dt.toLocaleDateString() : "";
        }
        //setup
        vueMethods.loadRole = async function() {
            var res = await fetch("Roles/" + this.roleId)
            this.role = await res.json()
        }
        vueMethods.loadRoleMembers = async function() {
            var res = await fetch("Roles/" + this.roleId + "/Members")
            this.roleMembersLoading = true
            this.roleMembers = (await res.json())
                .map(rm => ({...rm, 
                        memberName: rm.aaudUser.displayLastName + ", " + rm.aaudUser.displayFirstName,
                        active: rm.aaudUser.current == 1 ? "Y" : "N"
                }))
            this.roleMembersLoading = false
            this.clearRoleMember()
        }
        //form submission functions
        vueMethods.editRoleMember = async function() {
            if (this.roleMemberForm.member) {
                var body = {
                    ...this.roleMemberForm,
                    memberId: this.roleMemberForm.member.value,
                    roleId: this.urlParams.get("RoleId")
                }
                fetch("Roles/" + body.roleId + "/Members/" + body.memberId, {
                    method: this.roleMemberForm.editing ? "PUT" : "POST",
                    body: JSON.stringify(body),
                    headers: { "Content-Type": "application/json" }
                })
                .then(r => {
                    this.loadRoleMembers()
                })
            }
        }
        vueMethods.deleteRoleMember = async function() {
            fetch("Roles/" + this.urlParams.get("RoleId") + "/Members/" + this.roleMemberForm.member.value,{ 
                method: "DELETE", 
                body: this.roleMemberForm.comment 
            })
            .then(r => {
                this.loadRoleMembers()
            })
        }
        //form select / clear / user search
        vueMethods.clearRoleMember = function () {
            this.selectedRoleMember = {}
            this.roleMemberForm = { editing: false }
        }
        vueMethods.selectForEdit = function(props) {
            this.selectedRoleMember = props.row
            this.roleMemberForm.startDate = formatDateForDateInput(this.selectedRoleMember.startDate)
            this.roleMemberForm.endDate = formatDateForDateInput(this.selectedRoleMember.endDate)
            this.roleMemberForm.member = { label: props.row.aaudUser.displayLastName + ", " + props.row.aaudUser.displayFirstName, value: props.row.memberId }
            this.roleMemberForm.editing = true
        }
        vueMethods.memberSearch = function(val, update, abort) {
            if(val.length < 3) {
                abort()
                return
            }

            update(() => {
                var res = fetch("Members?search=" + val)
                    .then(r => r.json())
                    .then(data => 
                        this.memberSearchResults = data
                            .map(m => ({label: m.displayLastName + ", " + m.displayFirstName, value: m.mothraId}))
                    )
            })
        }

        vueMountedActions.push(async function () {
            this.roleId = this.urlParams.get("RoleId")
            this.loadRole() 
            this.loadRoleMembers()
        })
    </script>
}