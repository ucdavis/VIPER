
<div class="q-pa-md">
    <h2>Members of {{role.role}}</h2>
    <q-btn href="/RAPS" icon="arrow_back" label="Roles" class="q-mb-md"></q-btn>
    
    <q-table title="Members"
             dense
             row-key="memberId"
             :loading="roleMembersLoading"
             :rows="roleMembers"
             :columns="rolesmembersColumns"
             :filter="roleMembersFilter"
             :pagination="roleMembersPagination">
        <template v-slot:top-left>
            <q-btn dense color="secondary" label="Add Member" @@click="showForm = true" no-caps></q-btn>
            <div class="q-pa-sm q-gutter-sm">
                <q-dialog v-model="showForm" @@hide="clearRoleMember">
                    <q-card>
                        <q-form @@submit="editRoleMember" v-bind="roleMemberForm">
                            <q-card-section>
                                <div class="text-h6">{{editingIndex >= 0 ? "Edit" : "Create"}} Role Member</div>
                            </q-card-section>

                            <q-card-section>
                                <div class="row">
                                    <q-select outlined dense use-input input-debounce="300"
                                                label="User"
                                                v-model="roleMemberForm.member"
                                                @@filter="memberSearch"
                                                :options="memberSearchResults"
                                                :readonly="editingIndex >= 0">
                                    </q-select>
                                </div>
                                <div class="row">
                                    <q-input type="date" outlined dense v-model="roleMemberForm.startDate" label="Start Date"></q-input>
                                </div>
                                <div class="row">
                                    <q-input type="date" outlined dense v-model="roleMemberForm.endDate" label="End Date"></q-input>
                                </div>
                                <div class="row">
                                    <q-input outlined dense v-model="roleMemberForm.comment" label="Comment"></q-input>
                                </div>
                            </q-card-section>

                            <q-card-actions align="evenly">
                                <q-btn no-caps :label="editingIndex >= 0 ? 'Update Member' : 'Add Member'" type="submit" padding="xs sm" color="primary"></q-btn>
                                <q-btn no-caps label="Delete" type="button" padding="xs lg" @@click="deleteRoleMember" color="red" v-if="editingIndex >= 0"></q-btn>
                            </q-card-actions>
                        </q-form>
                    </q-card>
                </q-dialog>
            </div>
        </template>
        <template v-slot:top-right="props">
            <q-input class="q-ml-xs q-mr-xs" v-model="roleMembersFilter" dense outlined debounce="300" placeholder="Filter Results">
                <template v-slot:append>
                    <q-icon name="filter_alt" />
                </template>
            </q-input>
        </template>
        <template v-slot:body-cell-memberid="props">
            <q-td :props="props">
                <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="dataset" :href="'RSOP/?MemberId=' + props.row.memberId"></q-btn>
                <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="security" :href="'MemberRoles/?RoleId=' + props.row.memberId"></q-btn>
                <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="lock" :href="'MemberPermissions/?RoleId=' + props.row.memberId"></q-btn>
            </q-td>
        </template>
        <template v-slot:body-cell-actions="props">
            <q-td :props="props">
                <q-btn no-caps size="md" :props="props" color="primary" @@click="selectForEdit(props.row)">Edit</q-btn>
            </q-td>
        </template>
    </q-table>
</div>

@section Scripts {
    <script asp-add-nonce="true">
        //form
        vueObjects.showForm = false
        vueObjects.roleId = 0
        vueObjects.role = {}
        vueObjects.memberSearchResults = []
        vueObjects.roleMemberForm = {}
        vueObjects.editingIndex = -1;
        //table
        vueObjects.roleMembers = []
        vueObjects.roleMembersLoading = true
        vueObjects.roleMembersPagination = { rowsPerPage: 0 }
        vueObjects.roleMembersFilter = "";
        vueObjects.rolesmembersColumns = [
            { name: "memberid", label: "", field: "memberId", align: "left", style: "width:75px;" },
            { name: "member", label: "Member", field: "memberName", align: "left", sortable: true },
            { name: "startdate", label: "Start Date", field: "startDate", align: "left", sortable: true, format: v => formatDate(v) },
            { name: "enddate", label: "End Date", field: "endDate", align: "left", sortable: true, format: v => formatDate(v) },
            { name: "adddate", label: "Add Date", field: "addDate", align: "left", sortable: true, format: v => formatDate(v) },
            { name: "lastmodified", label: "Last Modified", field: "lastModified", align: "left", sortable: true },
            { name: "active", label: "Active", field: "active", align: "left", sortable: true },
            { name: "actions", label: "Actions", field: "", align: "left", sortable: false }
        ]

        formatDate = function(d) {
            var dt = new Date(d)
            return (d && d != "" && dt instanceof Date && !isNaN(dt.valueOf())) ? dt.toLocaleDateString() : "";
        }
        //setup
        vueMethods.loadRole = async function() {
            var res = await fetch("Roles/" + this.roleId)
            this.role = await res.json()
        }
        vueMethods.loadRoleMembers = async function() {
            var res = await fetch("Roles/" + this.roleId + "/Members")
            this.roleMembersLoading = true
            this.roleMembers = (await res.json())
                .map(rm => ({...rm, 
                        memberName: rm.aaudUser.displayLastName + ", " + rm.aaudUser.displayFirstName,
                        active: rm.aaudUser.current == 1 ? "Y" : "N"
                }))
            this.roleMembersLoading = false
            this.clearRoleMember()
        }
        //form submission functions
        vueMethods.editRoleMember = async function() {
            if (this.roleMemberForm.member) {
                var body = {
                    ...this.roleMemberForm,
                    memberId: this.roleMemberForm.member.value,
                    roleId: this.urlParams.get("RoleId")
                }
                fetch("Roles/" + body.roleId + "/Members/" + body.memberId, {
                    method: this.editingIndex >= 0 ? "PUT" : "POST",
                    body: JSON.stringify(body),
                    headers: { "Content-Type": "application/json" }
                })
                .then(r => {
                    this.loadRoleMembers()
                })
            }
        }
        vueMethods.deleteRoleMember = async function() {
            fetch("Roles/" + this.urlParams.get("RoleId") + "/Members/" + this.roleMemberForm.member.value,{ 
                method: "DELETE", 
                body: this.roleMemberForm.comment 
            })
            .then(r => {
                this.loadRoleMembers()
            })
        }
        //form select / clear / user search
        vueMethods.clearRoleMember = function () {
            this.roleMemberForm = { }
            this.editingIndex = -1
            this.showForm = false
        }
        vueMethods.selectForEdit = function(item) {
            this.showForm = true
            this.editingIndex = this.roleMembers.indexOf(item)
            this.roleMemberForm.startDate = formatDateForDateInput(item.startDate)
            this.roleMemberForm.endDate = formatDateForDateInput(item.endDate)
            this.roleMemberForm.member = { label: item.aaudUser.displayLastName + ", " + item.aaudUser.displayFirstName, value: item.memberId }
        }
        vueMethods.memberSearch = function(val, update, abort) {
            if(val.length < 3) {
                abort()
                return
            }

            update(() => {
                var res = fetch("Members?search=" + val)
                    .then(r => r.json())
                    .then(data => 
                        this.memberSearchResults = data
                            .map(m => ({label: m.displayLastName + ", " + m.displayFirstName, value: m.mothraId}))
                    )
            })
        }

        vueMountedActions.push(async function () {
            this.roleId = this.urlParams.get("RoleId")
            this.loadRole() 
            this.loadRoleMembers()
        })
    </script>
}