@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    IUserHelper UserHelper = new UserHelper();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    @RenderSection("Metatags", required: false)

    <title>@ViewData["Title"] - VIPER(2.0)</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @if (HttpHelper.Environment?.EnvironmentName != "Production")
    {
        <text>
            <link rel="stylesheet" href="~/css/site-@(HttpHelper.Environment?.EnvironmentName).css" asp-append-version="true" />
        </text>
    }
    <link href="~/lib/quasar/dist/quasar.prod.css" rel="stylesheet" type="text/css">

    @RenderSection("Styles", required: false)

</head>
<body>
    <q-layout view="hHh lpR fFf">
        <q-header elevated id="mainLayoutHeader" height-hint="98">

            <q-toolbar>
                <q-btn flat dense icon="menu" class="q-mr-xs lt-md">
                    @await Component.InvokeAsync("MiniNav",
                    new {
                    user = UserHelper.GetCurrentUser()
                    }
                    )
                </q-btn>
                <q-btn flat dense icon="list" class="q-mr-xs lt-md" @@click="mainLeftDrawer = !mainLeftDrawer"></q-btn>
                <q-btn flat dense label="Viper 2.0" class="lt-md" href="@Url.Content("~/")"></q-btn>

                <q-btn flat dense no-caps icon="home" class="gt-sm text-white" href="@Url.Content("~/")">
                    <span id="mainLayoutViper">VIPER 2.0</span>
                    @if (HttpHelper.Environment?.EnvironmentName == "Development")
                    {
                        <span id="mainLayoutViperMode">Development</span>
                    }
                    else if (HttpHelper.Environment?.EnvironmentName == "Test")
                    {
                        <span id="mainLayoutViperMode">Test</span>
                    }
                </q-btn>
               
                @if (UserHelper.IsEmulating())
                {
                    <q-banner inline-actions class="bg-warning text-black">
                        <strong>EMULATING:</strong> @UserHelper.GetCurrentUser()?.DisplayFullName <q-btn href="@Url.Content("~/ClearEmulation")" color="warning" class="text-black">Stop</q-btn>
                    </q-banner>
                }
                <q-space></q-space>
                
                @*Don't show the search until it does something*@
                @if (HttpHelper.Environment?.EnvironmentName == "Development")
                {
                    <q-input rounded dense standout dark v-model="searchText" label="Search" bg-color="white" label-color="black" class="q-pa-xs">
                        <template v-slot:append>
                            <q-icon name="search" color="black"></q-icon>
                        </template>
                    </q-input>
                }

                @await Component.InvokeAsync("ProfilePic",
                new {
                userName = UserHelper.GetCurrentUser()?.LoginId
                }
                )

                <q-btn flat round dense icon="logout" class="q-mr-xs" href="@Url.Content("~/logout")">
                    <q-tooltip>
                        Logout
                    </q-tooltip>
                </q-btn>
            </q-toolbar>

            @await Component.InvokeAsync("MainNav",
            new {
            user = UserHelper.GetCurrentUser()
            }
            )
            
        </q-header>
       
        <q-drawer v-model="mainLeftDrawer" show-if-above elevated side="left" :mini="!mainLeftDrawer || mainLeftMiniState" @@click.capture="drawerClick">
            <template v-slot:default>
                <div class="q-pa-sm">
                    <q-btn dense
                        round
                        unelevated
                        color="secondary"
                        icon="close"
                        class="float-right lt-md"
                        @@click="mainLeftDrawer = false"></q-btn>

                    <q-list dense separator>
                        <template v-for="(menuItem, index) in viperNavMenu" :key="index">
                            <q-item v-if="menuItem.menuItemURL !=''"
                                clickable v-ripple :href="menuItem.menuItemURL">
                                <q-item-section avatar v-if="menuItem.icon">
                                    <q-icon :name="menuItem.icon" />
                                </q-item-section>
                                <q-item-section>
                                    <q-item-label lines="1">{{ menuItem.menuItemText }}</q-item-label>
                                </q-item-section>
                            </q-item>
                            <q-item v-else :class="menuItem.isHeader ? 'leftNavHeader' : ''">
                                <q-item-section avatar v-if="menuItem.icon">
                                    <q-icon :name="menuItem.icon" />
                                </q-item-section>
                                <q-item-section>
                                    <q-item-label lines="1">{{ menuItem.menuItemText }}</q-item-label>
                                </q-item-section>
                            </q-item>
                        </template>
                    </q-list>
                </div>
            </template>
        </q-drawer>

        <q-page-container>
            <div class="q-pa-md">
            @RenderBody()
            </div>
        </q-page-container>

        <q-footer elevated class="bg-white">
            <div class="q-pa-y-sm q-pa-x-md q-gutter-xs text-caption row" id="footerNavLinks">
                <div class="col-12 col-md q-pl-md">
                    <a href="https://svmithelp.vetmed.ucdavis.edu/" target="_blank" rel="noopener" class="text-primary">
                        <q-icon color="primary" name="help_center" size="xs"></q-icon>
                        SVM-IT ServiceDesk
                    </a>
                    <span class="text-primary q-px-sm">|</span>
                    <a href="http://www.vetmed.ucdavis.edu/" target="_blank" rel="noopener" class="text-primary">
                        <q-icon color="primary" name="navigation" size="xs"></q-icon>
                        SVM Home
                    </a>
                    <span class="text-primary q-px-sm">|</span>
                    <a href="http://www.ucdavis.edu/" target="_blank" rel="noopener" class="text-primary">
                        <q-icon color="primary" name="school" size="xs"></q-icon>
                        UC Davis
                    </a>
                    <div class="q-pl-sm text-black">
                        &copy; 2023 School of Veterinary Medicine
                    </div>
                </div>
                <div class="col-12 col-md-auto gt-sm">
                    <div id="ucdavislogo" class="q-mt-sm q-mr-lg">
                        <a href="@HttpHelper.GetOldViperRootURL()"><img src="https://viper.vetmed.ucdavis.edu/images/vetmed_logo.jpg" alt="UC Davis Veterinary Medicine logo" border="0" width="134" height="24"></a>
                    </div>
                </div>
            </div>
        </q-footer>

    </q-layout>

    <script src="~/lib/vue/vue.global.prod.js"></script>
    <script src="~/lib/quasar/dist/quasar.umd.prod.js"></script>
    <script asp-add-nonce="true">
        // set global JS object with the CSRF token.
        var csrfToken = "@Xsrf.GetAndStoreTokens(Context).RequestToken";
    </script>
    <script src="~/js/site.js"></script>
    <script src="~/js/vueSetup.js"></script>
    <script asp-add-nonce="true">
        // define global Vue objects
        const { createApp, ref, computed, watch, nextTick, toRaw } = Vue;
        let vueSetupActions = [];
        let vueSetupObjects = {};
        vueSetupObjects.mainLeftDrawer = ref(false);
        vueSetupObjects.mainLeftMiniState = ref(false);
        let vueObjects = { showViperError: false, viperErrorMessage: "", viperNavMenu: [] };
        let vueMethods = {};
        let vueWatchers = {};
        let vueEmits = {};
        let vueProps = {};
        var vueBeforeCreateActions = [];
        var vueCreatedActions = [];
        var vueBeforeMountActions = [];
        var vueMountedActions = [];
        vueMountedActions.push(loadViperLeftNav);
        var vueBeforeUnmountActions = [];
        var vueUnmountedActions = [];
        var vueBeforeUpdateActions = [];
        var vueUpdatedActions = [];        
    </script>

    @* Pages or controls can update the global VUE objects
    // BE SURE TO USE UNIQUE NAMES
    vueObjects.rapsCount = @Model.Count;
    vueMethods.rapsIncrementCount = function(){
    this.rapsCount = this.rapsCount + 1;
    var headers = {
    "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
    }
    $.ajax({
    type: "POST",
    url: 'RAPS?counter=' + this.rapsCount,
    });
    };
    vueWatchers.rapsCount = function(newCount, oldCount){
    alert("Value changed from " + oldCount + " to " + newCount);
    };
    vueMountedActions.push(function(){alert('Vue is mounted!')});
    *@
    @await RenderSectionAsync("Scripts", required: false)

    <q-dialog v-model="showViperError"
              auto-close="true">
        <q-banner>
            <template v-slot:avatar>
                <q-icon name="error" color="red" />
            </template>
            {{viperErrorMessage}}
        </q-banner>
    </q-dialog>

    <script asp-add-nonce="true">
        for(idx in vueApps) {
            vueApps[idx].create()
        }

        // initialize VUE and Quasar using global objects
        createApp({
            setup(){
                while (vueSetupActions.length) {
                    vueSetupActions.shift().call(this);
                }

                return vueSetupObjects
            },
            data() {
                return vueObjects
            },
            methods: vueMethods,
            watch: vueWatchers,
            emits: vueEmits,
            props: vueProps,
            computed: computed,
            beforeCreate() {
                while (vueBeforeCreateActions.length) {
                    vueBeforeCreateActions.shift().call(this);
                }
            },
            created() {
                this.urlParams = new URLSearchParams(window.location.search)
                while (vueCreatedActions.length) {
                    vueCreatedActions.shift().call(this);
                }
            },
            beforeMount() {
                while (vueBeforeMountActions.length) {
                    vueBeforeMountActions.shift().call(this);
                }
            },
            mounted() {
                while (vueMountedActions.length) {
                    vueMountedActions.shift().call(this);
                }
            },
            beforeUpdate() {
                while (vueBeforeUpdateActions.length) {
                    vueBeforeUpdateActions.shift().call(this);
                }
            },
            updated() {
                while (vueUpdatedActions.length) {
                    vueUpdatedActions.shift().call(this);
                }
            },
            beforeUnmount() {
                while (vueBeforeUnmountActions.length) {
                    vueBeforeUnmountActions.shift().call(this);
                }
            },
            unmounted() {
                while (vueUnmountedActions.length) {
                    vueUnmountedActions.shift().call(this);
                }
            }
        }).use(Quasar, {
            config: {
                brand: {
                    primary: '#022851',
                    //primary: '#1976d2',
                    secondary: '#00B2E3',
                    accent: '#C6007E',
                    dark: '#191919',
                    positive: '#3DAE2B',
                    negative: '#F93549',
                    info: '#00C4B3',
                    warning: '#FFCD00'
                }
            }
        }).mount('body');
    </script>

    @await RenderSectionAsync("FinalScripts", required: false)

</body>
</html>