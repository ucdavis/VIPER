@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    IUserHelper UserHelper = new UserHelper();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    @RenderSection("Metatags", required: false)

    <title>@ViewData["Title"] - VIPER(2.0)</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    @if (HttpHelper.HttpContext != null && HttpHelper.HttpContext.Request.Path.ToString().ToLower().Contains("/directory"))
        {
        <text>
            <link rel="stylesheet" href="~/css/directory.css" asp-append-version="true" />
        </text>
    }
    @if (HttpHelper.Environment?.EnvironmentName != "Production")
    {
        <text>
            <link rel="stylesheet" href="~/css/site-@(HttpHelper.Environment?.EnvironmentName).css" asp-append-version="true" />
        </text>
    }
    <link href="~/lib/quasar/dist/quasar.prod.css" rel="stylesheet" type="text/css">
    <script src="~/js/ucdavis-colors.js"></script>
    <script asp-add-nonce="true">
        /* global window, document */
        // Apply UC Davis brand colors immediately to prevent flash
        // Must run after Quasar CSS loads but before page content renders
        (function() {
            // Use shared colors if available, otherwise fallback to hardcoded values
            const colors = window.UCDavisBrandColors || {
                primary: '#022851',      // UC Davis Blue 100 (Primary Aggie Blue)
                secondary: '#4b6983',    // UC Davis Blue 70
                accent: '#ffc519',       // UC Davis Gold 90
                dark: '#1d1d1d',         // Dark background
                'dark-page': '#121212',  // Darker page background
                positive: '#226e34',     // Green for success states
                negative: '#6e2222',     // Red for error states
                info: '#289094',         // Teal for informational states
                warning: '#ffc519'       // Gold for warning states
            };

            // Apply as CSS variables immediately before page renders
            const root = document.documentElement;
            Object.entries(colors).forEach(([key, value]) => {
                root.style.setProperty('--q-' + key, value);
            });
        })();
    </script>

    @RenderSection("Styles", required: false)

</head>
<body>
    <q-layout view="hHh lpR fFf">
        <q-header elevated id="mainLayoutHeader" height-hint="98">
            <div v-show="false" id="headerPlaceholder">
                <div id="topPlaceholder" class="row items-center">
                    <a class="q-btn q-btn-item non-selectable no-outline q-btn--flat q-btn--rectangle q-btn--actionable q-focusable q-hoverable q-btn--no-uppercase q-btn--dense gt-sm text-white"
                       tabindex="0" href="@Url.Content("~/")">
                        <span class="q-focus-helper"></span>
                        <span class="q-btn__content text-center col items-center q-anchor--skip justify-center row">
                            <i class="q-icon notranslate material-icons" aria-hidden="true" role="img">home</i>
                            <span class="mainLayoutViper">VIPER 2.0</span>
                            @if (HttpHelper.Environment?.EnvironmentName == "Development")
                            {
                                <span class="mainLayoutViperMode">Development</span>
                            }
                            else if (HttpHelper.Environment?.EnvironmentName == "Test")
                            {
                                <span class="mainLayoutViperMode">Test</span>
                            }
                        </span>
                    </a>
                </div>
            </div>
            <q-toolbar v-cloak class="items-end">
                <img src="@Url.Content("~/images/")UCDSVMLogo.png" height="50" />

                <q-btn flat dense icon="menu" class="q-mr-xs lt-md">
                    @await Component.InvokeAsync("MiniNav",
                    new {
                    user = UserHelper.GetCurrentUser()
                    }
                    )
                </q-btn>
                <q-btn flat dense icon="list" class="q-mr-xs lt-md" @@click="mainLeftDrawer = !mainLeftDrawer"></q-btn>
                <q-btn flat dense label="Viper 2.0" class="lt-md" href="@Url.Content("~/")"></q-btn>

                <q-btn flat dense no-caps class="gt-sm text-white q-py-none q-ml-md self-end" href="@Url.Content("~/")">
                    <span class="mainLayoutViper">VIPER 2.0</span>
                    @if (HttpHelper.Environment?.EnvironmentName == "Development")
                    {
                        <span class="mainLayoutViperMode">Development</span>
                    }
                    else if (HttpHelper.Environment?.EnvironmentName == "Test")
                    {
                        <span class="mainLayoutViperMode">Test</span>
                    }
                </q-btn>

                @if (UserHelper.IsEmulating())
                {
                    <q-banner dense rounded inline-actions class="bg-warning text-black q-ml-lg">
                        <strong>EMULATING:</strong> @UserHelper.GetCurrentUser()?.DisplayFullName <q-btn no-caps dense href="@Url.Content("~/ClearEmulation")" color="secondary" class="text-white q-px-sm q-ml-md">End Emulation</q-btn>
                    </q-banner>
                }
                <q-space></q-space>

                @*Don't show the search until it does something*@
                @if (HttpHelper.Environment?.EnvironmentName == "Development")
                {
                    <q-input rounded dense standout dark v-model="searchText" label="Search" bg-color="white" label-color="black" class="q-pa-xs">
                        <template v-slot:append>
                            <q-icon name="search" color="black"></q-icon>
                        </template>
                    </q-input>
                }

                @await Component.InvokeAsync("ProfilePic",
                new {
                userName = UserHelper.GetCurrentUser()?.LoginId
                }
                )
            </q-toolbar>

            @await Component.InvokeAsync("MainNav",
            new {
            user = UserHelper.GetCurrentUser()
            }
            )

        </q-header>

        @await Component.InvokeAsync("LeftNav",
        new {
        user = UserHelper.GetCurrentUser(),
        nav = 0
        }
        )

        <q-page-container id="mainLayoutBody">
            <div class="q-pa-md" v-cloak>
            @RenderBody()
            </div>
        </q-page-container>

        <q-footer elevated class="bg-white" v-cloak>
            <div class="q-py-sm q-px-md q-gutter-xs text-caption row" id="footerNavLinks">
                <div class="col-12 col-md q-pl-md">
                    <a href="https://svmithelp.vetmed.ucdavis.edu/" target="_blank" rel="noopener" class="text-primary">
                        <q-icon color="primary" name="help_center" size="xs"></q-icon>
                        SVM-IT ServiceDesk
                    </a>
                    <span class="text-primary q-px-sm">|</span>
                    <a href="http://www.vetmed.ucdavis.edu/" target="_blank" rel="noopener" class="text-primary">
                        <q-icon color="primary" name="navigation" size="xs"></q-icon>
                        SVM Home
                    </a>
                    <span class="text-primary q-px-sm">|</span>
                    <a href="http://www.ucdavis.edu/" target="_blank" rel="noopener" class="text-primary">
                        <q-icon color="primary" name="school" size="xs"></q-icon>
                        UC Davis
                    </a>
                </div>
                <div class="col-12 col-md-auto gt-sm">
                    <div class="text-black">
                        &copy; 2023 School of Veterinary Medicine
                    </div>
                </div>
            </div>
        </q-footer>

    </q-layout>

    @await Component.InvokeAsync("VueCdnInit")

    @await RenderSectionAsync("Scripts", required: false)

    @await Component.InvokeAsync("SessionTimeout")

    @await Component.InvokeAsync("VueCdnCreate")

    @await RenderSectionAsync("FinalScripts", required: false)

</body>
</html>
