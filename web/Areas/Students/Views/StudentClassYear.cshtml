<div class="row q-mb-sm">
    <div class="col">
        <h2>Student Class Years</h2>
    </div>
</div>

<q-dialog v-model="showForm" @@hide="clear(this)">
    <q-card style="width: 500px; max-width: 80vw;">
        <q-form @@submit="submitStudentClassYear" v-model="studentClassYear">
            <q-card-section>
                <div class="text-h6">Updating record for {{selectedStudentName}} Class of {{studentClassYear.classYear}}</div>
                If you change the class year one the current class year, a new record will be created and the current class year one will be marked
                as inactive with the reasons and term below.
            </q-card-section>
            <q-card-section>
                <q-checkbox v-model="studentClassYear.active" label="Current class year"></q-checkbox>
                <br />
                <q-checkbox v-model="studentClassYear.ross" label="Ross Student"></q-checkbox>
                @* :true-value="1" :false-value="0" *@
                <div>If changing class year, please fill out below.</div>
                <q-select outlined dense options-dense label="Class Year" v-model="studentClassYear.classYear" emit-value :options="classYearOptions"></q-select>
                <q-select outlined dense options-dense clearable label="Reason Left" v-model="studentClassYear.leftReason" emit-value map-options :options="reasons"></q-select>
                <q-select outlined dense options-dense clearable label="Term Left" v-model="studentClassYear.leftTerm" emit-value map-options :options="terms"></q-select>
                <q-input type="textarea" outlined dense label="Comment" v-model="studentClassYear.comment"></q-input>
            </q-card-section>
            <q-card-actions align="evenly">
                <q-btn no-caps label="Save" type="submit" padding="xs sm" color="primary"></q-btn>
                <q-btn no-caps label="Delete" type="button" padding="xs md" @@click="deleteStudentClassYear(this)" color="red"></q-btn>
            </q-card-actions>
        </q-form>
    </q-card>
</q-dialog>

<q-form @@submit="return false;">
    <div class="row q-mb-md">
        <div class="col col-md-6 col-lg-3">
            <q-select outlined dense options-dense
                      label="Class Year" v-model="classYear" :options="classYearOptions">
            </q-select>
            <q-toggle v-model="activeOnly" label="Only students currently in this class"></q-toggle>
            <br />
            <q-btn no-caps color="primary" label="Submit" class="q-mt-md" @@click="getStudents()"></q-btn>
        </div>
        <div class="col col-md-2 col-lg-2 offset-md-3">
            <q-btn v-if="classYear.value" :label="'Import students into ' + classYear?.label" dense no-caps color="secondary"
                   @@click="toImport(this)"></q-btn>
        </div>
    </div>
</q-form>

<q-table :rows="students"
         row-key="personId"
         :columns="cols"
         :title="classYear.label"
         :pagination="{rowsPerPage: 0}"
         no-data-label="No students found. Please import this year."
         :filter="filter"
         dense>
    <template v-slot:top-right>
        <q-toggle v-model="problemsOnly" label="Problems Only" class="q-mr-md"></q-toggle>
        <q-input v-model="filter" dense outlined debounce="300" placeholder="Filter results" class="q-ml-xs q-mr-xs">
            <template v-slot:append>
                <q-icon name="filter_alt" />
            </template>
        </q-input>
    </template>
    <template v-slot:body-cell-avatar="props">
        <q-td :props="props">
            <q-avatar square>
                <img :src="'@HttpHelper.GetOldViperRootURL()/public/utilities/getbase64image.cfm?altphoto=1&mailId=' + props.row.mailId" class="smallPhoto" />
            </q-avatar>
        </q-td>
    </template>
    <template v-slot:body-cell-name="props">
        <q-td :props="props">
            <a :href="">
                {{props.row.lastName}}, {{props.row.firstName}}
            </a>
        </q-td>
    </template>
    <template v-slot:body-cell-classyear="props">
        <q-td :props="props">
            <span v-for="classYear in props.row.classYears">
                <q-btn dense no-caps :label="classYear.classYear" v-if="classYear.active" color="primary"
                       class="q-px-sm" @@click="selectStudent(props.row, classYear)">
                    <q-badge v-if="classYear.ross" color="red" class="q-mx-sm">Ross</q-badge>
                    <q-badge color="orange" class="q-mx-sm" v-if="classYear.leftReason">{{classYear.leftReasonText}}</q-badge>
                </q-btn>
            </span>
        </q-td>
    </template>
    <template v-slot:body-cell-previousyears="props">
        <q-td :props="props">
            <span v-for="classYear in props.row.classYears">
                <q-btn dense no-caps :label="classYear.classYear" v-if="!classYear.active" color="secondary"
                       class="q-px-sm" @@click="selectStudent(props.row, classYear)">
                    <q-badge v-if="classYear.ross" color="red" class="q-mx-sm">Ross</q-badge>
                    <q-badge color="orange" class="q-mx-sm" v-if="classYear.leftReason">{{classYear.leftReasonText}}</q-badge>
                </q-btn>
            </span>
        </q-td>
    </template>
</q-table>

<div v-if="students.length == 0 && classYear.value && !loading">
    No students found. Please import this class year.
</div>
@section Scripts {
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return {
                    //class year selection
                    classYear: { label: "", value: "" },
                    classYearOptions: [],

                    //students table
                    cols: [
                        { name: "avatar", label: "", field: "", align: "left", style: "width:75px;" },
                        { name: "name", label: "Student", field: "", align: "left", sortable: true },
                        { name: "classyear", label: "Class Year", field: "personId", align: "left", sortable: true },
                        { name: "previousyears", label: "Prev Years", field: "firstName", align: "left", sortable: true },
                        { name: "problems", label: "Problems", field: "problems", align: "left", sortable: true },
                    ],
                    allStudents: [],
                    students: [],
                    activeOnly: false,
                    problemsOnly: false,
                    loading: false,
                    filter: null,

                    //form
                    showForm: false,
                    selectedStudentName: "",
                    studentClassYear: { personId: 0, ross: false, reason: "", leftTerm: "", comment: "", active: false },
                    terms: [],
                    reasons: ["PELP", "VSTP", "Left"]
                }
            },
            methods: {
                getStudents: async function () {
                    this.loading = true
                    this.students = []
                    this.allStudents = []

                    //if class year specified, add to url params and get students with this class year
                    if (this.classYear?.value) {
                        var qp = new URLSearchParams(window.location.search)
                        qp.set("classYear", this.classYear.value)
                        history.pushState(null, null, "?" + qp.toString())
                        var u = "@Url.Content("~/api/students/dvm/?classYear=")" + this.classYear.value + "&includeAllClassYears=" + !this.activeOnly
                        this.allStudents = await viperFetch(this, u)

                        //get problems
                        var u = "@Url.Content("~/api/students/dvm/classYearReport?classYear=")" + this.classYear.value
                        var problems = await viperFetch(this, u)
                        problems.forEach(p => {
                            var s = this.allStudents.find(s => s.personId == p.personId)
                            if(s != undefined) {
                                s.problems = p.problems
                            }
                        })
                    }

                    this.students = this.allStudents.filter(s => !this.problemsOnly || s?.problems?.length)
                    this.loading = false
                },
                clear: function () {
                    this.studentClassYear = { personId: 0, ross: false, reason: "", leftTerm: "", comment: "" }
                    this.showForm = false
                },
                selectStudent: function (student, cy) {
                    this.selectedStudentName = student.fullName

                    this.studentClassYear = { ...cy }
                    this.showForm = true
                },
                submitStudentClassYear: async function () {
                    var u = "@Url.Content("~/api/students/dvm/")" + this.studentClassYear.classYear + "/" + this.studentClassYear.personId
                    await viperFetch(this,
                        u,
                        {
                            method: "PUT",
                            body: JSON.stringify(this.studentClassYear),
                            headers: { "Content-Type": "application/json" }
                        }
                    )
                    this.getStudents()
                    this.clear()
                },
                deleteStudentClassYear: async function () {
                    var u = "@Url.Content("~/api/students/dvm/studentClassYears/")" + this.studentClassYear.studentClassYearId
                    await viperFetch(this,
                        u,
                        {
                            method: "DELETE",
                            headers: { "Content-Type": "application/json" }
                        }
                    )
                    this.getStudents()
                    this.clear()
                },
                toImport: function () {
                    location.href = "?import=1&classYear=" + this.classYear.value
                }
            },
            mounted: async function () {
                //get class year from url
                var cy = this.urlParams.get("classYear") ?? ""
                if (cy) {
                    this.classYear = { label: "Class of " + cy, value: cy }
                }
                //get all class years, reasons, terms for select boxes
                this.classYearOptions.push({ label: "", value: "" })
                for (var i = new Date().getFullYear() + 6; i >= 2016; i--) {
                    this.classYearOptions.push({ label: "Class of " + i, value: i })
                }
                viperFetch(this, "@Url.Content("~/curriculum/terms")")
                    .then(data => {
                        this.terms = data
                            .map(t => ({ label: t.description, value: t.termCode }))
                    })
                viperFetch(this, "@Url.Content("~/api/students/dvm/leftReasons")")
                    .then(data => {
                        this.reasons = data
                            .map(r => ({ label: r.reason, value: r.classYearLeftReasonId }))
                    })
                //get students
                this.getStudents()
            },
            watch: {
                problemsOnly: function() {
                    this.students = this.allStudents.filter(s => !this.problemsOnly || s?.problems?.length)
                }
            }
        })
    </script>
}