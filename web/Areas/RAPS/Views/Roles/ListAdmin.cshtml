<h2>Roles</h2>
<q-dialog v-model="rolesTable.showForm" @@hide="rolesTable.clear(this)">
    <q-card style="width: 500px; max-width: 80vw;">
        <q-form @@submit="rolesTable.submit(this)" v-model="rolesTable.object">
            <q-card-section>
                <div class="text-h6">{{rolesTable.editing ? "Edit" : "Create"}} Role</div>
                <div class="bg-negative text-white q-pa-sm rounded" v-if="rolesTable.errors?.message?.length > 0">{{rolesTable.errors.message}}</div>
            </q-card-section>
            <q-card-section>
                <q-input outlined v-model="rolesTable.object.role" label="Role"
                         :error="rolesTable.errors?.Role?.error"
                         :error-message="rolesTable.errors?.Role?.message"></q-input>
                <q-input outlined v-model="rolesTable.object.description" label="Description" type="textarea"></q-input>
                <q-checkbox v-model="rolesTable.object.application" :true-value="1" :false-value="0" label="Application Role"></q-checkbox>
                <q-select dense options-dense outlined clearable v-model="rolesTable.object.viewName" :options="views" label="View"></q-select>
            </q-card-section>
            <q-card-actions align="evenly">
                <q-btn no-caps :label="rolesTable.editing ? 'Update Role' : 'Add Role'" type="submit" padding="xs sm" color="primary"></q-btn>
                <q-btn no-caps label="Delete" type="button" padding="xs md" @@click="rolesTable.delete(this)" color="red" v-if="rolesTable.editing"></q-btn>
            </q-card-actions>
        </q-form>
    </q-card>
</q-dialog>

<div class="q-pa-md">
    <q-table dense
             row-key="roleId"
             :loading="rolesTable.loading"
             :rows="rolesTable.rows"
             :columns="rolesTable.columns"
             :filter="rolesTable.filter"
             :pagination="rolesTable.pagination">
        <template v-slot:top-left>
            <q-btn no-caps color="green" label="Add Role" @@click="rolesTable.showForm = true"></q-btn>
        </template>
        <template v-slot:top-right="props">
            <q-input class="q-ml-xs q-mr-xs" v-model="rolesTable.filter" dense outlined debounce="300" placeholder="Filter Results">
                <template v-slot:append>
                    <q-icon name="filter_alt" />
                </template>
            </q-input>
        </template>
        <template v-slot:body-cell-roleid="props">
            <q-td :props="props">
                <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="person" :href="'RoleMembers?roleId=' + props.row.roleId"></q-btn>
                <q-btn :props="props" v-if="props.row.application != 1" size="sm" padding="xs" color="primary" square flat icon="lock" :href="'RolePermissions?roleId=' + props.row.roleId"></q-btn>
                <q-btn :props="props" v-if="props.row.application == 1" size="sm" padding="xs" color="primary" square flat icon="security" :href="'DelegateRoles?roleId=' + props.row.roleId"></q-btn>
            </q-td>
        </template>
        <template v-slot:body-cell-role="props">
            <q-td :props="props">
                <q-badge :props="props" v-if="props.row.application == 1" transparent icon="supervisor_account" color="amber-7" class="q-mr-2">Delegate</q-badge>
                {{props.row.friendlyName}}
                <br />     
                <span style="font-size:.9em">{{props.row.description}}</span>
            </q-td>
        </template>
        <template v-slot:body-cell-members="props">
            <q-td :props="props">
                {{props.row.tblRoleMembers.length}}
            </q-td>
        </template>
        <template v-slot:body-cell-edit="props">
            <q-td :props="props">
                <q-btn :props="props" outline dense color="primary" size="sm" icon="edit" padding="xs sm" @@click="rolesTable.selectRow(props.row)"></q-btn>
            </q-td>
        </template>
    </q-table>
</div>

@section Scripts {
    <script src="~/js/qtable.js"></script>
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return  {
                    views: [],
                    rolesTable: new quasarTable({
                        keys: "roleId",
                        urlBase: "Roles",
                        columns: [
                            { name: "roleid", label: "", field: "roleId", align: "left", style: "width:50px;" },
                            { name: "role", label: "Role", field: "role", align: "left", sortable: true },
                            { name: "viewname", label: "Member List", field: "viewName", align: "left", sortable: true },
                            { name: "members", label: "Explicit Members", field: "", align: "left", sortable: true },
                            { name: "edit", label: "", field: "" }
                        ],
                        //create object with limited properties to do insert/update
                        createBody: function (vueApp, data) {
                            return {
                                roleId: data.roleId,
                                role: data.role,
                                application: data.application == 1 ? 1 : 0,
                                description: data.description,
                                viewName: data.viewName
                            }
                        }
                    })
                }
            },
            async mounted() {
                this.rolesTable.load()
                this.views = await viperFetch(this, "Roles/Views")
            }
        })
    </script>
}