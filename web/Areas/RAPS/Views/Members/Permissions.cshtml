<q-btn-group outline rounded class="q-mt-sm">
    <q-btn no-caps color="primary" class="q-mb-sm" label="View existing permissions" icon="view_list"
           :outline="showWhich != 'Existing'" @@click="showWhich='Existing'"></q-btn>
    <q-btn no-caps color="primary" class="q-mb-sm" label="Add Permissions" icon="add"
           :outline="showWhich != 'Add'" @@click="showWhich='Add'"></q-btn>
</q-btn-group>

<div v-show="showWhich == 'Existing'">
    <h2>
        Permissions for {{member.displayFirstName}} {{member.displayLastName}}
    </h2>
    
    <q-table title="Permissions for {{member.displayFirstName}}"
             dense
             row-key="permissionId"
             :loading="memberPermissionsTable.loading"
             :rows="memberPermissionsTable.rows"
             :columns="memberPermissionsTable.columns"
             :pagination="memberPermissionsTable.pagination"
             :filter="memberPermissionsTable.filter">
        <template v-slot:top-left>
            <div class="q-pa-sm q-gutter-sm">
                <q-dialog v-model="memberPermissionsTable.showForm" @@hide="memberPermissionsTable.clear(this)">
                    <q-card>
                        <q-form @@submit="memberPermissionsTable.submit(this)" v-bind="memberPermissionsTable.object">
                            <q-card-section>
                                <div class="text-h6">{{memberPermissionsTable.editing >= 0 ? "Edit" : "Create"}} Permission Membership</div>
                                <div class="bg-negative text-white q-pa-sm rounded" v-if="memberPermissionsTable.errors?.message?.length > 0">{{memberPermissionsTable.errors.message}}</div>
                            </q-card-section>

                            <q-card-section>
                                <div class="row">
                                    <q-input type="date" outlined dense v-model="memberPermissionsTable.object.startDate" label="Start Date"
                                             :error="memberPermissionsTable.errors?.startDate?.error" :error-message="memberPermissionsTable.errors?.startDate?.message"></q-input>
                                </div>
                                <div class="row">
                                    <q-input type="date" outlined dense v-model="memberPermissionsTable.object.endDate" label="End Date"
                                             :error="memberPermissionsTable.errors?.endDate?.error" :error-message="memberPermissionsTable.endDate?.message"></q-input>
                                </div>
                                <div class="row q-pt-sm">
                                    <q-btn-toggle no-caps outlined dense :toggle-color="memberPermissionsTable.object.access == 0 ? 'red' : 'green'"
                                                  v-model="memberPermissionsTable.object.access" :options="allowDenyOptions">
                                        <template v-slot:allow>
                                            <div class="q-px-lg" align="evenly">
                                                <q-icon name="check" color="white" v-if="memberPermissionsTable.object.access != 0"></q-icon>
                                                Allow
                                            </div>
                                        </template>
                                        <template v-slot:deny>
                                            <div class="q-px-lg" align="evenly">
                                                <q-icon name="close" color="white" v-if="memberPermissionsTable.object.access == 0"></q-icon>
                                                Deny
                                            </div>
                                        </template>
                                    </q-btn-toggle>
                                </div>
                            </q-card-section>

                            <q-card-actions align="evenly">
                                <q-btn no-caps :label="memberPermissionsTable.editing ? 'Update Permission for User' : 'Add Permission for User'" type="submit" padding="xs sm" color="primary"></q-btn>
                                <q-btn no-caps label="Delete" type="button" padding="xs lg" @@click="memberPermissionsTable.delete(this)" color="red" v-if="memberPermissionsTable.editing"></q-btn>
                            </q-card-actions>
                        </q-form>
                    </q-card>
                </q-dialog>
            </div>
        </template>
        <template v-slot:top-right>
            <q-input v-model="memberPermissionsTable.filter" dense outlined debounce="300" placeholder="Filter results" class="q-ml-xs q-mr-xs">
                <template v-slot:append>
                    <q-icon name="filter_alt" />
                </template>
            </q-input>
        </template>
        <template v-slot:body-cell-links="props">
            <q-td :props="props">
                <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="security" :href="'PermissionRoles?permissionId=' + props.row.permissionId"></q-btn>
                <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="person" :href="'PermissionMembers?permissionId=' + props.row.permissionId"></q-btn>
            </q-td>
        </template>
        <template v-slot:body-cell-access="props">
            <q-td :props="props">
                <q-icon size="sm" :name="props.row.access ? 'check' : 'close'" :color="props.row.access ? 'green' : 'red'"></q-icon>
            </q-td>
        </template>
        <template v-slot:body-cell-actions="props">
            <q-td :props="props">
                <q-btn outline size="sm" icon="edit" padding="xs md" :props="props" color="primary" @@click="memberPermissionsTable.selectRow(props.row)"></q-btn>
            </q-td>
        </template>
    </q-table>
</div>

<div v-show="showWhich == 'Add'">
    <h2>
        Add Permissions for {{member.displayFirstName}} {{member.displayLastName}}
    </h2>
    <q-form>
        <div class="row">
            <q-input type="date" outlined dense v-model="memberPermissionParams.startDate" label="Start Date"></q-input>
            <q-input type="date" outlined dense v-model="memberPermissionParams.endDate" label="End Date" class="q-ml-md"></q-input>
            <q-btn sm dense no-caps class="q-px-sm q-ml-md" label="Grant Checked Permissions" type="button" color="primary" @@click="grantPermissions"></q-btn>
            <q-btn sm dense no-caps class="q-px-sm q-ml-md" label="Deny Checked Permissions" type="button" color="red" @@click="denyPermissions"></q-btn>
        </div>
        <div class="row q-pt-sm q-mb-sm">
            
        </div>
    </q-form>
    <q-table dense
             row-key="permissionId"
             :loading="permissionsTable.loading"
             :rows="permissionsTable.rows"
             :columns="permissionsTable.columns"
             :filter="permissionsTable.filter"
             :pagination="permissionsTable.pagination"
             selection="multiple"
             v-model:selected="selectedPermissions">
        <template v-slot:top-right="props">
            <q-input class="q-ml-xs q-mr-xs" v-model="permissionsTable.filter" dense outlined debounce="300" placeholder="Filter Results">
                <template v-slot:append>
                    <q-icon name="filter_alt" />
                </template>
            </q-input>
        </template>
    </q-table>
</div>

@section Scripts {
    <script src="~/js/qtable.js"></script>
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return {
                    memberId: 0,
                    member: {},
                    showWhich: 'Existing',
                    selectedPermissions: [],
                    memberPermissionParams: { startDate: "", endDate: "", comment: "" },
                    allowDenyOptions: [
                        { value: 1, slot: 'allow' },
                        { value: 0, slot: 'deny' }
                    ],
                    memberPermissionsTable: new quasarTable({
                        keys: ["permissionId"],
                        urlBase: "Members",
                        columns: [
                            { name: "links", label: "", field: "", align: "left", style: "width:75px;" },
                            { name: "access", label: "Access", field: "access", align: "left", style: "width:75px;" },
                            { name: "permission", label: "Permission", field: "permission", align: "left", sortable: true },
                            { name: "startdate", label: "Start Date", field: "startDate", align: "left", sortable: true, format: v => formatDate(v) },
                            { name: "enddate", label: "End Date", field: "endDate", align: "left", sortable: true, format: v => formatDate(v) },
                            { name: "adddate", label: "Add Date", field: "addDate", align: "left", sortable: true, format: v => formatDate(v) },
                            { name: "lastmodified", label: "Last Modified", field: "lastModified", align: "left", sortable: true },
                            { name: "actions", label: "Actions", field: "", align: "left", sortable: false }
                        ],
                        //after loading member permissions, set last modified
                        onLoad: function (data, vueApp) {
                            this.rows = data.map(rp => ({
                                ...rp,
                                permission: rp.permission.permission,
                                lastModified: formatDate(rp.modTime) + " (" + rp.modBy.trim() + ")"
                            }))
                            //reload the permissons table
                            if (this.editing) {
                                this.vueApp._.data.permissionsTable.load()
                            }
                        },
                        //set member id and permission id when creating/updating
                        createBody: function (v, object) {
                            return {
                                memberId: v.urlParams.get("memberId"),
                                permissionId: object.permissionId,
                                access: object.access == 1 ? 1 : 0,
                                startDate: object?.startDate,
                                endDate: object?.endDate
                            }
                        },
                        //on selection, format dates and set up user select box
                        selectObject: function (object) {
                            this.object = {
                                permissionId: object.permissionId,
                                access: object.access == 1 ? 1 : 0,
                                startDate: formatDateForDateInput(object.startDate),
                                endDate: formatDateForDateInput(object.endDate),
                                memberId: object.memberId
                            }
                        },
                        pagination: { rowsPerPage: 0 }
                    }),
                    permissionsTable: new quasarTable({
                        keys: ["permissionId"],
                        urlBase: "Permissions",
                        columns: [
                            { name: "permission", label: "Permission", field: "permission", align: "left", sortable: true },
                            { name: "description", label: "Description", field: "description", align: "left", sortable: true }
                        ],
                        onLoad: function (data) {
                            existingPermissions = this.vueApp._.data.memberPermissionsTable.rows
                                .reduce((result, rp) => {
                                    result.push(rp.permissionId)
                                    return result
                                }, [])
                            this.rows = data.filter(r =>
                                existingPermissions.indexOf(r.permissionId) == -1
                            )
                        },
                        pagination: { rowsPerPage: 15 }
                    })
                }
            },
            methods: {
                addSelectedPermissions: function(access) {
                    this.selectedPermissions.forEach((value, index) => {
                        var permissionMember = { permissionId: value.permissionId, memberId: this.memberId, access: access }
                        if (this.memberPermissionParams.startDate.length) {
                            permissionMember.startDate = this.memberPermissionParams.startDate
                        }
                        if (this.memberPermissionParams.endDate.length) {
                            permissionMember.endDate = this.memberPermissionParams.endDate
                        }
                        viperFetch(this,
                            "Members/" + this.memberId + "/Permissions/",
                            {
                                method: "POST",
                                body: JSON.stringify(permissionMember),
                                headers: { "Content-Type": "application/json" }
                            },
                            [this.loadTables]
                        )
                    })
                },
                grantPermissions: async function () {
                    this.addSelectedPermissions(1)
                },
                denyPermissions: async function () {
                    this.addSelectedPermissions(0)
                },
                loadTables: async function () {
                    await this.memberPermissionsTable.load(this)
                    this.permissionsTable.load(this)
                    this.selectedPermissions = []
                },
                loadMember: async function () {
                    this.member = await viperFetch(this, "members/" + this.memberId)
                }
            },
            mounted() {
                this.memberId = this.urlParams.get("memberId")
                this.loadMember()
                this.memberPermissionsTable.urlBase = "Members/" + this.memberId + "/Permissions"
                this.loadTables()
            }
        })
    </script>
}