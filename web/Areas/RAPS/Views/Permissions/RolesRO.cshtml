<h2>Roles for Permission {{permission.permission}}</h2>
<q-table dense
         row-key="roleId"
         :loading="rolePermissionTable.loading"
         :rows="rolePermissionTable.rows"
         :columns="rolePermissionTable.columns"
         :pagination="rolePermissionTable.pagination">

    <template v-slot:body-cell-links="props">
        <q-td :props="props">
            <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="person" title="View members of this role" :href="'RoleMembers?roleId=' + props.row.roleId"></q-btn>
            <q-btn :props="props" size="sm" padding="xs" color="primary" square flat icon="security" title="View permissions granted by this role" :href="'RolePermissions?roleId=' + props.row.roleId"></q-btn>
        </q-td>
    </template>
    <template v-slot:body-cell-remove="props">
        <q-td :props="props">
            <q-btn no-caps size="sm" :props="props" color="red" icon="delete" @@click="deleteRolePermission(props.row)"></q-btn>
        </q-td>
    </template>
</q-table>

@section Scripts {
    <script src="~/js/qtable.js"></script>
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return {
                    permissionId: 0,
                    permission: {},
                    rolePermissionTable: new quasarTable({
                        keys: ["roleId"],
                        urlBase: "Roles",
                        columns: [
                            { name: "allow", label: "Allow", field: "", align: "left", style: "width:50px;" },
                            { name: "deny", label: "Deny", field: "", align: "left", style: "width:50px;" },
                            { name: "role", label: "Role", field: "roleName", align: "left", sortable: true },
                            { name: "description", label: "Description", field: "description", align: "left", sortable: false }
                        ],
                        onLoad: function (data) {
                            this.rows = data.map(rp => ({
                                ...rp,
                                permissionId: rp.permissionId,
                                accessDescription: rp.access == 1 ? "Allow" : "Deny",
                                permissionName: rp.permission?.permission,
                                roleName: rp.role?.displayName != null ? rp.role.displayName : rp.role.role
                            }))
                        },
                        pagination: { rowsPerPage: 0 }
                    })
                }
            },
            methods: {
                loadPermission: async function () {
                    this.permission = await viperFetch(this, "Permissions/" + this.permissionId)
                },
                //Load data
                loadTables: async function () {
                    await this.rolePermissionTable.load(this)
                }
            },
            async mounted() {
                this.permissionId = this.urlParams.get("permissionId")
                this.loadPermission()
                this.rolePermissionTable.urlBase = "Permissions/" + this.permissionId + "/Roles"
                this.loadTables()
            }
        })
    </script>
}