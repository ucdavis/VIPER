
<q-form @@submit="submitEpa()" v-if="showForm" class="q-mb-md">
    <h2>{{epa?.epaId ? 'Updating EPA' : 'Creating EPA'}}</h2>
    <div class="row">
        <q-input outlined dense type="numeric" label="Order" step="1" v-model="epa.order" class="col-4 col-md-3 col-lg-1"></q-input>
    </div>
    <div class="row">
        <q-input outlined dense type="text" label="Name" v-model="epa.name" class="col col-lg-6"></q-input>
    </div>
    <div class="row">
        <q-editor v-model="epa.description" min-height="15rem" class="col col-lg-6"
                  :toolbar="[
                    [ 'left', 'center', 'right', 'justify' ],
                    [ 'bold', 'italic', 'underline', 'strike' ],
                    ['quote', 'unordered', 'ordered', 'outdent', 'indent'],
                    [ 'undo', 'redo' ],
                    ['viewsource'] ]"></q-editor>
    </div>
    <div class="row">
        <q-toggle label="Active" v-model="epa.active"></q-toggle>
    </div>
    <div class="row">
        <q-select outlined dense options-dense label="Services" class="col col-lg-4" emit-value map-options
                  v-model="epaServices" use-chips multiple :options="services"></q-select>
    </div>
    <div class="row">
        <q-btn dense no-caps type="submit" :label="(epa?.epaId ? 'Update' : 'Create') + ' EPA'" color="primary"
               class="q-mt-sm col col-4 col-md-4 col-lg-1"></q-btn>
        <q-btn dense no-caps type="button" label="Clear" color="secondary" @@click="clearEpa()"
               v-if="epa?.epaId"
               class="q-mt-sm q-ml-lg col col-4 col-md-4 col-lg-1"></q-btn>
        <q-btn dense no-caps type="button" label="Delete EPA" color="red" @@click="deleteEpa()"
               v-if="epa?.epaId"
               class="q-mt-sm q-ml-lg col col-4 col-md-4 col-lg-1"></q-btn>
    </div>
    <hr />
</q-form>

<h3>
    <q-btn no-caps size="md" label="Add EPA" color="green" @@click="this.showForm=true"></q-btn>
</h3>

<q-list separator>
    <q-item-label header class="text-h6 text-dark">
        Entrustable Professional Activities
    </q-item-label>
    <q-item>
        <q-item-section top side class="text-dark col-5 col-md-4 col-lg-2">
            <span class="row fit">
                <span class="col">Edit</span>
                <span class="col">Active</span>
                <span class="col">Order</span>
            </span>
        </q-item-section>
        <q-item-section top side class="text-dark col-7 col-md-8 col-lg-3">Name</q-item-section>
        <q-item-section top class="text-dark col-12 col-md-6 col-lg-4">Description</q-item-section>
        <q-item-section top class="text-dark col-12 col-md-6 col-lg-3">Services</q-item-section>
    </q-item>
    <q-item v-for="epa in epas">
        <q-item-section top side class="text-dark col-5 col-md-4 col-lg-2">
            <template v-slot:default>
                <span class="row fit">
                    <span class="col">
                        <q-btn dense no-caps size="md" icon="edit" color="primary" @@click="selectEpa(epa)"></q-btn>
                    </span>
                    <span class="col">
                        <q-icon :name="epa.active ? 'check' : 'close'" :color="epa.active ? 'green' : 'red'" size="md"></q-icon>
                    </span>
                    <span class="col">
                        {{epa.order}}
                    </span>
                </span>
            </template>
        </q-item-section>
        <q-item-section top side class="text-dark col-7 col-md-8 col-lg-3">
            {{epa.name}}
        </q-item-section>
        @*v-html - this is sanitized in EpaController*@
        <q-item-section top class="text-dark col-12 col-md-6 col-lg-4" v-html="epa.description"></q-item-section>
        <q-item-section top class="text-dark col-12 col-md-6 col-lg-3">
            <span v-for="epaService in epa.services">
                {{epaService.serviceName}}
            </span>
        </q-item-section>
    </q-item>
</q-list>

@section Scripts {
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return {
                    services: [],
                    epaServices: [],
                    epas: [],
                    epa: {},
                    showForm: false
                }
            },
            methods: {
                getEpas: async function () {
                    viperFetch(this, "epas")
                        .then(data => this.epas = data)
                    this.clearEpa()
                },
                selectEpa: function (epa) {
                    this.epa = epa
                    this.epaServices = this.epa.services.map(s => s.serviceId)
                    this.showForm = true
                },
                submitEpa: async function () {
                    var u = this.epa?.epaId ? ("epas/" + this.epa.epaId) : "epas"
                    //submit epa
                    let { services: _, ...epaObj } = this.epa
                    var updatedEpa = await viperFetch(this, u, {
                        method: this.epa?.epaId ? "PUT" : "POST",
                        body: JSON.stringify(epaObj),
                        headers: { "Content-Type": "application/json" }
                    })
                    //submit services
                    
                    await viperFetch(this, "epas/" + updatedEpa.epaId + "/services", {
                        method: "PUT",
                        body: JSON.stringify(this.epaServices),
                        headers: { "Content-Type": "application/json" }
                    })
                    
                    //reload
                    this.getEpas()
                },
                deleteEpa: async function () {
                    await viperFetch(this, "epas/" + this.epa.epaId, { method: "DELETE", headers: { "Content-Type": "application/json" } })
                    this.getEpas()
                },
                clearEpa: async function () {
                    this.epa = { active: true, description: "" }
                    this.showForm = false
                },

                //Epa to services
                getServices: async function () {
                    viperFetch(this, "clinicalservices")
                        .then(data => this.services = data.map(d => ({ label: d.serviceName, value: d.serviceId })))
                    //var scheduledServices = viperFetch(this, "clinicalschedule/instructor?mothraId=" + this.userId)
                }
            },
            mounted: async function () {
                await this.getServices()
                this.getEpas()
            }
        })
    </script>
}