@{
    IUserHelper UserHelper = new UserHelper();
    var siteRootUrl = Url.Content("~/");
}
<div class="row epa justify-center items-start content-start">
    <div style="max-width: 1200px" class="col">
        @*
        Before showing EPA form, need to select Service and EPA
        *@
        <div class="row items-start q-mb-lg">
            @*Select Service*@
            <div class="col-12 col-md-6 col-lg-4 q-mr-md">
                <q-select label="Select Service" dense options-dense outlined @*:outlined="service.length == 0"*@
                          v-model="service" emit-value map-options :options="services">
                    <template v-slot:option="scope">
                        <q-item v-bind="scope.itemProps">
                            <q-item-section side v-if="serviceThisWeek == scope.opt.value">
                                <q-badge color="green">This Week</q-badge>
                            </q-item-section>
                            <q-item-section side v-if="serviceLastWeek == scope.opt.value">
                                <q-badge color="blue">Last Week</q-badge>
                            </q-item-section>
                            <q-item-section side v-if="servicesScheduled.indexOf(scope.opt.value) >= 0">
                                <q-badge color="yellow">Scheduled</q-badge>
                            </q-item-section>
                            <q-item-section>
                                <q-item-label>{{scope.opt.label}}</q-item-label>
                            </q-item-section>
                        </q-item>
                    </template>
                </q-select>
            </div>

            @*Select EPA*@
            <div class="col-12 col-md-6 col-lg-4">
                <q-select label="Select EPA" dense options-dense outlined v-model="selectedEpa" @*emit-value map-options*@
                          :options="epas">
                </q-select>
            </div>
        </div>

        <q-banner inline-actions rounded v-if="success" class="bg-green text-white q-mb-md">
            EPA Saved
            <template v-slot:action>
                <q-btn flat label="Dismiss" @@click="success = false"></q-btn>
            </template>
        </q-banner>

        <div v-if="service != '' && selectedEpa != ''">
            <div class="row justify-between items-center q-mb-lg">
                <div class="col-12 col-md-6">
                    <h2 class="epa text-weight-regular">{{selectedEpa.label}}</h2>
                </div>
                <div class="col-12 col-md-6 text-right">
                    <div class="row items-center">
                        <div class="col-12 col-md-8">
                            <q-select dense options-dense v-model="selectedStudent" label="Student" :options="students" class="q-mr-md items-center"
                                      :outlined="selectedStudent == null" :borderless="selectedStudent != null" stack-label="false"
                                      use-input input-debounce="300" @@filter="studentSearch" clearable>
                                <template v-slot:after>
                                        <q-avatar v-if="selectedStudent?.mailId" rounded class="fit">
                                            <q-img :src="'@HttpHelper.GetOldViperRootURL()/public/utilities/getbase64image.cfm?mailid='+ selectedStudent?.mailId +'&altphoto=1'"
                                                    class="smallPhoto rounded-borders" loading="eager" no-spinner="true"></q-img>
                                        </q-avatar>
                                </template>
                                <template v-slot:no-option>
                                    <div class="q-pa-sm">No students found matching the filter</div>
                                </template>
                                <template v-slot:option="std">
                                    <q-item v-bind="std.itemProps">
                                        @*
                                        <q-item-section avatar>
                                            <q-avatar rounded>
                                                <q-img :src="'@HttpHelper.GetOldViperRootURL()/public/utilities/getbase64image.cfm?mailid='+ std.opt.mailId +'&altphoto=1'"
                                                       class="smallPhoto" loading="eager" no-spinner="true"></q-img>
                                            </q-avatar>
                                        </q-item-section>
                                        *@
                                        <q-item-section>
                                            <q-item-label>{{std.opt.label}}</q-item-label>
                                        </q-item-section>
                                    </q-item>
                                </template>
                            </q-select>
                        </div>
                        <div class="col-auto">
                            <q-btn-toggle v-model="studentOptionsType" push toggle-color="primary"
                                          :options="[{label: 'Service', value: 'Service'}, {label: 'V4', value: 'V4'}, {label: 'All', value: 'All'}]">
                            </q-btn-toggle>
                        </div>
                    </div>
                </div>
            </div>
            @*Show form once student is selected*@
            <q-form @@submit="submitEpa" v-bind="assessment" v-if="selectedStudent != null">
                <div class="bg-red-5 text-white q-pa-sm rounded q-mb-md" v-if="errors?.message?.length > 0">
                    {{errors.message}}
                    Please make sure you have selected a service, EPA, student, and a level on the entrustment scale.
                </div>
                <div class="row q-mb-sm text-center gt-sm">
                    <div class="col" v-for="level in levelOptions">
                        {{level.text}}
                    </div>
                </div>
                <div class="row q-mb-md gt-sm">
                    <div class="col q-mx-sm levelSelection" v-for="level in levelOptions">
                        <q-btn :label="level.label"
                               push
                               unelevated
                               flat
                               size="md"
                               dense
                               :class="assessment.level == level.value ? 'selectedLevel q-py-sm' : 'q-py-sm'"
                               @@click="assessment.level = level.value">
                        </q-btn>
                    </div>
                </div>
                <div class="q-mb-sm text-center lt-md">
                    <div class="q-mx-sm levelSelection" v-for="level in levelOptions">
                        <q-btn push
                               unelevated
                               flat
                               no-caps
                               size="md"
                               dense
                               :class="assessment.level == level.value ? 'selectedLevel' : ''"
                               @@click="assessment.level = level.value">
                            <template v-slot:default>
                                {{level.label}}. {{level.text}}
                            </template>
                        </q-btn>
                    </div>
                </div>
                <q-input type="textarea" outlined dense v-model="assessment.comment" class="q-mb-md"
                         label="Comments: What should the student keep doing? How can they improve performance?"></q-input>
                <div class="column">
                    <q-btn no-caps
                           label="Submit EPA"
                           type="submit"
                           padding="sm xl"
                           color="primary"
                           size="md"
                           class="self-center"></q-btn>
                </div>
            </q-form>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/cts.css" asp-append-version="true" />
}

@section Scripts {
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return {
                    userId: '@UserHelper?.GetCurrentUser()?.MothraId',
                    //services
                    service: "",
                    services: [],
                    servicesScheduled: [],
                    serviceThisWeek: 0,
                    serviceLastWeek: 0,

                    //epas
                    epas: [],
                    selectedEpa: "",

                    //students
                    student: { name: "", mailid: "", id: "" },
                    students: [], //the students to show in the options
                    studentsOnService: [],
                    studentsLoadedForService: 0,
                    allStudents: [],
                    selectedStudent: null,
                    studentOptionsType: "Service",

                    //levels
                    levelOptions: [],

                    //assessment data
                    assessment: { comment: "", level: "" },
                    errors: {},
                    success: false
                }
            },
            methods: {
                //services
                getServices: async function () {
                    await viperFetch(this, "clinicalservices")
                        .then(data => this.services = data.map(d => ({ label: d.serviceName, value: d.serviceId })))
                    //get all scheduled services along with services scheduled this week and last week
                    var scheduledServices = await viperFetch(this, "../api/cts/clinicalschedule/instructor?mothraId=" + this.userId)
                    var today = new Date()
                    today.setHours(0, 0, 0, 0)
                    var sunday = new Date(today)
                    sunday.setDate(sunday.getDate() - sunday.getDay())
                    var schedThisWeek = scheduledServices.find(s => today >= new Date(s.dateStart) && today <= new Date(s.dateEnd))
                    var schedLastWeek = scheduledServices.find(s => new Date(s.dateEnd).getTime() == sunday.getTime())
                    this.serviceThisWeek = schedThisWeek ? schedThisWeek.serviceId : 0
                    this.serviceLastWeek = schedLastWeek && schedLastWeek.serviceId != this.serviceThisWeek ? schedLastWeek.serviceId : 0
                    this.servicesScheduled = scheduledServices.map(s => s.serviceID)

                    //auto select a service - this week, then last week
                    if (this.serviceThisWeek > 0)
                        this.service = this.serviceThisWeek
                    else if (this.serviceLastWeek > 0)
                        this.service = this.serviceLastWeek
                },

                //load epas and auto select if there's only one
                getEpas: async function () {
                    this.selectedEpa = ""
                    if (this.service != '') {
                        await viperFetch(this, "epas?serviceId=" + this.service)
                            .then(data => this.epas = data.map(d => ({ label: d.name, value: d.epaId })))
                        if (this.epas.length == 1) {
                            this.selectedEpa = this.epas[0]
                        }
                    }
                },
                //students
                getStudents: async function () {
                    //load all students and students on service, if necessary
                    if (this.allStudents.length == 0) {
                        await viperFetch(this, "@siteRootUrl" + "students/dvm")
                            .then(data => this.allStudents = data.map(s => ({
                                label: s.lastName + ", " + s.firstName, mailId: s.mailId, value: s.personId, classLevel: s.classLevel
                            })))
                    }

                    if (this.service && this.service != this.studentsLoadedForService) {
                        var d = new Date().toJSON().split("T")[0]
                        await viperFetch(this, "../api/cts/clinicalschedule/student?serviceId=" + this.service + "&startDate=" + d + "&endDate=" + d)
                            .then(data => this.studentsOnService = data.map(s => ({
                                label: s.lastName + ", " + s.firstName, mailId: s.mailId, value: s.personId
                            })))
                        this.studentsLoadedForService = this.service
                    }

                    switch (this.studentOptionsType) {
                        case "Service":
                            this.students = this.studentsOnService
                            break;
                        case "V4":
                            this.students = this.allStudents.filter(s => s.classLevel == 'V4')
                            break;
                        default:
                            this.students = this.allStudents
                            break;
                    }
                },
                getLevels: async function () {
                    await viperFetch(this, "levels?epa=true")
                        .then(data => this.levelOptions = data.map(level => ({
                            label: level.order,
                            value: level.levelId,
                            slot: level.order,
                            text: level.levelName
                        })))
                },
                submitEpa: async function () {
                    this.errors = {}
                    var data = {
                        epaId: this.selectedEpa.value,
                        levelId: this.assessment.level,
                        comment: this.assessment.comment,
                        studentId: this.selectedStudent.value,
                        serviceId: this.service
                    }
                    await viperFetch(this, "studentEpa", {
                        method: "POST",
                        body: JSON.stringify(data),
                        headers: { "Content-Type": "application/json" }
                    }, [], this.errors)
                    if(this.errors?.message === undefined) {
                        this.selectedStudent = null
                        this.assessment.level = ""
                        this.assessment.comment = ""
                        this.success = true
                    }
                },
                studentSearch: function (val, update, abort) {
                    if (val === '') {
                        update(() => this.getStudents())
                        return
                    }
                    update(() => {
                        const s = val.toLowerCase()
                        this.students = this.allStudents.filter(v => v.label.toLowerCase().indexOf(s) > -1)
                    })
                }
            },
            mounted: async function () {
                await this.getServices()
                this.getLevels()

                var selectedService = getItemFromStorage("Cts_Epa_ServiceId")
                if(selectedService != null)
                    this.service = selectedService
            },
            watch: {
                //when service is updated, reload epa list and student list
                service: {
                    handler(v) {
                        this.getEpas()
                        this.getStudents()
                        putItemInStorage("Cts_Epa_ServiceId", v)
                    }
                },
                //set student list when student type is selected
                studentOptionsType: {
                    handler(v) {
                        this.getStudents()
                    }
                },
                selectedStudent: {
                    handler(v) {
                        if(v != null)
                            this.success = false
                    }
                }
            }
        })
    </script>
}