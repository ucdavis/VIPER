
<h2>View Assessments</h2>

<q-form>
    <div class="row">
        <div class="col-12 col-md-6 col-lg-3">
            <q-select outlined dense options-dense label="Service" v-model="serviceId" :options="services" emit-value></q-select>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <q-select outlined dense options-dense label="Student" v-model="studentId" :options="students" emit-value></q-select>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <q-select outlined dense options-dense label="Entered By" v-model="enteredById" :options="assessors" emit-value></q-select>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-md-6 col-lg-3">
            <q-input outlined dense type="date" v-model="dateFrom" label="Date from"></q-input>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <q-input outlined dense type="date" v-model="dateTo" label="Date To"></q-input>
        </div>
        <div class="col-12 col-md-6 col-lg-3">
            <q-select outlined dense options-dense label="Assessment Type" v-model="assessmentType" :options="assessmentTypes" emit-value></q-select>
        </div>
    </div>
    <div class="row q-mt-sm">
        <div class="col-6 col-md-3 offset-3 text-center">
            <q-btn label="View Assessments" color="primary" @@click="loadAssessments()"></q-btn>
        </div>
    </div>
</q-form>
{{ this.assessments }}

@section Scripts {
    <script asp-add-nonce="true">
        createVueApp({
            data() {
                return {
                    //parameters for loading assessments
                    serviceId: null,
                    studentId: null,
                    enteredById: null,
                    dateFrom: null,
                    dateTo: null,
                    assessmentType: "EPA",
                    assessmentTypes: [ {label: "EPA", value: "EPA"} ],
                    assessments: []
                }
            },
            methods: {
                loadAssessments: async function() {
                    var params = {};
                    if(this.serviceId != null) {
                        params.serviceId = this.serviceId
                    }
                    if(this.studentId != null) {
                        params.studentId = this.studentId
                    }
                    if(this.enteredById != null) {
                        params.enteredById = this.enteredById
                    }
                    if(this.dateFrom != null) {
                        params.dateFrom = this.dateFrom
                    }
                    if(this.dateTo != null) {
                        params.dateTo = this.dateTo
                    }

                    var u = null;
                    switch(this.assessmentType) {
                        case "EPA":
                            u = new URL("studentepa", location.href); break;
                        default: break;
                    }

                    if(u != null) {
                        u.search = new URLSearchParams(params)
                        viperFetch(this, u)
                            .then(data => this.assessments = data)
                    }
                }
            },
            mounted: async function() {
                await this.loadAssessments()
            }
        })
    </script>
}
