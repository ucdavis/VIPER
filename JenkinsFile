@Library('AdminAppsSharedLibrary') _
def copyOperations = [
	[
		source: ".\\web\\bin\\Release\\net7.0",
		testDestination: "%vipertestnet%",
		prodDestination: "%viperprodnet%",
		includeFiles: "*.*",
		excludeFiles: "",
		excludeDirectories: ""
	]

]
pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }
    stages { 
        stage('Restore packages') {
		  steps {
			bat '"C:\\Program Files\\dotnet\\dotnet" restore Viper.sln'
		  }
		}
        stage('Clean Previous Build') {
		  steps {
			bat '"C:\\Program Files\\dotnet\\dotnet" clean Viper.sln'
		  }
		}
		stage('Build for test') {
			when {
				expression { params.Branch == 'development' }
			}
			steps {
				bat '"C:\\Program Files\\dotnet\\dotnet" publish ./web/Viper.csproj -c "Release" /p:EnvironmentName=Test'
			}
		}
		stage('Build for prod') {
			when {
				expression { params.Branch == 'master' || params.Branch == "main" }
			}
			steps {
				bat '"C:\\Program Files\\dotnet\\dotnet" publish ./web/Viper.csproj -c "Release" /p:EnvironmentName=Production'
			}
		}
		stage('Tests') {
			steps {
                bat 'dotnet test ./test/Viper.test.csproj -e Test --nologo'
            }
		}
		stage('Deploy to test') {
			when {
				expression { params.Branch == 'development' }
			}
			steps {
				networkShares()
				filecopy copyOperations, 'test', env.WORKSPACE
			}
		}
		stage('Deploy to prod') {
			when {
				expression { params.Branch == 'master' || params.Branch == "main" }
			}
			steps {
				networkShares()
				filecopy copyOperations, 'prod', env.WORKSPACE
			}
		}
    }
}