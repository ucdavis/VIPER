<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    @RenderSection("Metatags", required: false)

    <title>@ViewData["Title"] - VIPER(2.0)</title>
    <script src="~/js/site.js"></script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="~/lib/quasar/dist/quasar.prod.css" rel="stylesheet" type="text/css">

    @RenderSection("Styles", required: false)

</head>
<body>
    @Html.AntiForgeryToken()
    <q-layout view="hHh lpR fFf">
        <q-header elevated class="bg-primary text-white" height-hint="98">

            <q-toolbar class="bg-primary text-white">
                <q-btn flat dense icon="menu" class="q-mr-xs lt-md">
                    @await Component.InvokeAsync("MiniNav",
                    new {
                    user = UserHelper.GetCurrentUser()
                    }
                    )
                </q-btn>
                <q-btn flat dense icon="list" class="q-mr-xs lt-md" @@click="mainLeftDrawer = !mainLeftDrawer"></q-btn>
                <q-btn flat dense label="Viper 2.0" class="lt-md" href="@Url.Content("~/")"></q-btn>

                @if (HttpHelper.Environment?.EnvironmentName == "Development")
                {
                    <q-btn flat dense icon="home" class="gt-sm" label="VIPER 2.0 -- DEVELOPMENT" href="@Url.Content("~/")"></q-btn>
                }
                else if (HttpHelper.Environment?.EnvironmentName == "Test")
                {
                    <q-btn flat dense icon="home" class="gt-sm" label="VIPER 2.0 - TEST" href="@Url.Content("~/")"></q-btn>
                }
                else
                {
                    <q-btn flat dense icon="home" class="gt-sm" label="VIPER 2.0" href="@Url.Content("~/")"></q-btn>
                }
                @if (UserHelper.IsEmulating())
                {
                    <q-banner inline-actions class="bg-negative">
                        EMULATING: @UserHelper.GetCurrentUser()?.DisplayFullName <q-btn href="@Url.Content("~/ClearEmulation")" color="negative">Stop</q-btn>
                    </q-banner>
                }
                <q-space></q-space>
                <q-input rounded dense standout v-model="text" color="white" label="Search" bg-color="grey" class="q-pa-xs">
                    <q-btn flat round dense icon="search" color="black"></q-btn>
                </q-input>

                @await Component.InvokeAsync("ProfilePic",
                new {
                userName = UserHelper.GetCurrentUser()?.LoginId
                }
                )

                <q-btn flat round dense icon="logout" class="q-mr-xs" href="@Url.Content("~/logout")">
                    <q-tooltip>
                        Logout
                    </q-tooltip>
                </q-btn>
            </q-toolbar>

            @await Component.InvokeAsync("MainNav",
            new {
            user = UserHelper.GetCurrentUser()
            }
            )
            
        </q-header>

       
        <q-drawer v-model="mainLeftDrawer" show-if-above elevated side="left" :mini="!mainLeftDrawer || mainLeftMiniState" @@click.capture="drawerClick">
            <template v-slot:mini>
                <q-scroll-area class="fit mini-slot">
                    <div class="q-ma-sm">
                        <div class="column items-start">
                            <q-btn icon="chevron_right" color="secondary" round dense unelevated class="q-mini-drawer-show" @@click="mainLeftMiniState = false"></q-btn>
                        </div>
                    </div>
                </q-scroll-area>
            </template>
            <template v-slot:default>
                <div class="q-pa-sm">
                    <q-btn dense
                        round
                        unelevated
                        color="secondary"
                        icon="close"
                        class="float-right lt-md"
                        @@click="mainLeftDrawer = false"></q-btn>

                    <div v-for="n in 50" :key="n">Drawer {{ n }} / 50</div>

                </div>
                <div class="q-mini-drawer-hide absolute" style="top: 10px; right: -15px">
                    <q-btn dense
                           round
                           unelevated
                           color="secondary"
                           icon="chevron_left"
                           @@click="mainLeftMiniState = true" ></q-btn>
                </div>
            </template>
        </q-drawer>

        <q-page-container>
            <div class="q-pa-md">
            @RenderBody()
            </div>
        </q-page-container>

        <q-footer elevated class="bg-white">
            <div class="q-pa-md q-gutter-xs text-caption">
                <div id="ucdavislogo" class="float-right">
                    <a href="@HttpHelper.GetOldViperRootURL()"><img src="https://viper.vetmed.ucdavis.edu/images/vetmed_logo.jpg" alt="UC Davis Veterinary Medicine logo" border="0" width="134" height="24"></a>
                </div>
                <q-breadcrumbs separator=" | " active-color="primary" class="text-primary">
                    <q-breadcrumbs-el icon="help_center" label="SVM-IT ServiceDesk" href="https://svmithelp.vetmed.ucdavis.edu/"></q-breadcrumbs-el>
                    <q-breadcrumbs-el label="SVM Home" icon="navigation" href="http://www.vetmed.ucdavis.edu/"></q-breadcrumbs-el>
                    <q-breadcrumbs-el label="UC Davis" icon="school" href="http://www.ucdavis.edu/"></q-breadcrumbs-el>
                </q-breadcrumbs>
                <div class="q-pa-none text-black">
                    &copy; 2023 School of Veterinary Medicine
                </div>
            </div>
        </q-footer>

    </q-layout>

    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/vue/vue.global.prod.js"></script>
    <script src="~/lib/quasar/dist/quasar.umd.prod.js"></script>
    <script asp-add-nonce="true">
        // define global Vue objects
        const { createApp, ref, computed, watch, nextTick, toRaw } = Vue;
        let vueSetupActions = [];
        let vueSetupObjects = {};
        vueSetupObjects.mainLeftDrawer = ref(false);
        vueSetupObjects.mainLeftMiniState = ref(false);
        let vueObjects = {};
        let vueMethods = {};
        let vueWatchers = {};
        let vueEmits = {};
        let vueProps = {};
        var vueBeforeCreateActions = [];
        var vueCreatedActions = [];
        var vueBeforeMountActions = [];
        var vueMountedActions = [];
        var vueBeforeUnmountActions = [];
        var vueUnmountedActions = [];
        var vueBeforeUpdateActions = [];
        var vueUpdatedActions = [];        
    </script>

    @* Pages or controls can update the global VUE objects
    // BE SURE TO USE UNIQUE NAMES
    vueObjects.rapsCount = @Model.Count;
    vueMethods.rapsIncrementCount = function(){
    this.rapsCount = this.rapsCount + 1;
    var headers = {
    "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
    }
    $.ajax({
    type: "POST",
    url: 'RAPS?counter=' + this.rapsCount,
    headers:
    {
    "X-CSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
    }
    });
    };
    vueWatchers.rapsCount = function(newCount, oldCount){
    alert("Value changed from " + oldCount + " to " + newCount);
    };
    vueMountedActions.push(function(){alert('Vue is mounted!')});
    *@
    @await RenderSectionAsync("Scripts", required: false)

    <script asp-add-nonce="true">

        // initialize VUE and Quasar using global objects
        createApp({
            setup(){
                while (vueSetupActions.length) {
                    vueSetupActions.shift().call(this);
                }

                return vueSetupObjects
            },
            data() {
                return vueObjects
            },
            methods: vueMethods,
            watch: vueWatchers,
            emits: vueEmits,
            props: vueProps,
            beforeCreate() {
                while (vueBeforeCreateActions.length) {
                    vueBeforeCreateActions.shift().call(this);
                }
            },
            created() {
                this.urlParams = new URLSearchParams(window.location.search)
                while (vueCreatedActions.length) {
                    vueCreatedActions.shift().call(this);
                }
            },
            beforeMount() {
                while (vueBeforeMountActions.length) {
                    vueBeforeMountActions.shift().call(this);
                }
            },
            mounted() {
                while (vueMountedActions.length) {
                    vueMountedActions.shift().call(this);
                }
            },
            beforeUpdate() {
                while (vueBeforeUpdateActions.length) {
                    vueBeforeUpdateActions.shift().call(this);
                }
            },
            updated() {
                while (vueUpdatedActions.length) {
                    vueUpdatedActions.shift().call(this);
                }
            },
            beforeUnmount() {
                while (vueBeforeUnmountActions.length) {
                    vueBeforeUnmountActions.shift().call(this);
                }
            },
            unmounted() {
                while (vueUnmountedActions.length) {
                    vueUnmountedActions.shift().call(this);
                }
            }
        }).use(Quasar).mount('body');

        @if (HttpHelper.Environment?.EnvironmentName == "Development")
        {
            <text>
            Quasar.setCssVar('primary', '#092');
            </text>
        }
        else if (HttpHelper.Environment?.EnvironmentName == "Test")
        {
            <text>
            Quasar.setCssVar('primary', '#D00');
            </text>
        }
        
    </script>

    @await RenderSectionAsync("FinalScripts", required: false)

</body>
</html>