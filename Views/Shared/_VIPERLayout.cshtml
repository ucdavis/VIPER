<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    @RenderSection("Metatags", required: false)

    <title>@ViewData["Title"] - VIPER(2.0)</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="~/lib/quasar/dist/quasar.prod.css" rel="stylesheet" type="text/css">

    @RenderSection("Styles", required: false)

</head>
<body>
    @Html.AntiForgeryToken()
    <div id="siteHeaderNav">
        <div class="q-pa-sm">
            <div>
                <q-toolbar class="bg-primary text-white">
                    <q-btn flat dense icon="menu" class="q-mr-xs lt-md">
                        @await Component.InvokeAsync("MiniNav",
                            new {
                                user = UserHelper.GetCurrentUser()
                            }
                        )
                    </q-btn>
                    <q-btn flat dense label="Viper 2.0" class="lt-md" href="@Url.Content("~/")"></q-btn>

                    @if (HttpHelper.Environment?.EnvironmentName == "Development")
                    {
                        <q-btn flat dense icon="home" class="gt-sm" label="VIPER 2.0 -- DEVELOPMENT" href="@Url.Content("~/")"></q-btn>                        
                    }
                    else if (HttpHelper.Environment?.EnvironmentName == "Test")
                    {
                        <q-btn flat dense icon="home" class="gt-sm" label="VIPER 2.0 - TEST" href="@Url.Content("~/")"></q-btn>
                    }
                    else
                    {
                        <q-btn flat dense icon="home" class="gt-sm" label="VIPER 2.0" href="@Url.Content("~/")"></q-btn>
                    }
                    
                    <q-space></q-space>
                    @*TODO - create sitemap and link search tool*@
                    <q-input rounded dense standout v-model="text" color="white" label="Search" bg-color="grey" class="q-pa-xs">
                        <q-btn flat round dense icon="search" color="black"></q-btn>
                    </q-input>                    
        
                    @await Component.InvokeAsync("ProfilePic", 
                        new {
                            userName = UserHelper.GetCurrentUser()?.LoginId
                        }
                    )

                    <q-btn flat round dense icon="logout" class="q-mr-xs" href="@Url.Content("~/logout")">
                        <q-tooltip>
                            Logout
                        </q-tooltip>
                    </q-btn>
                </q-toolbar>

                @await Component.InvokeAsync("MainNav",
                    new {
                        user = UserHelper.GetCurrentUser()
                    }
                )

            </div>
        </div>
    </div>
    <div class="container">
        <main role="main" class="q-layout-padding">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container" id="siteFooter">
            <div class="q-pa-md q-gutter-xs text-caption">
                <hr />
                <div id="ucdavislogo" class="float-right">
                    <a href="@HttpHelper.GetOldViperRootURL()"><img src="https://viper.vetmed.ucdavis.edu/images/vetmed_logo.jpg" alt="UC Davis Veterinary Medicine logo" border="0" width="134" height="24"></a>
                </div>
                <q-breadcrumbs separator=" | " active-color="primary" class="text-primary">
                    <q-breadcrumbs-el icon="help_center" label="SVM-IT ServiceDesk" href="https://svmithelp.vetmed.ucdavis.edu/"></q-breadcrumbs-el>
                    <q-breadcrumbs-el label="SVM Home" icon="navigation" href="http://www.vetmed.ucdavis.edu/"></q-breadcrumbs-el>
                    <q-breadcrumbs-el label="UC Davis" icon="school" href="http://www.ucdavis.edu/" ></q-breadcrumbs-el>
                </q-breadcrumbs>
                <div class="q-pa-none">
                    &copy; 2023 School of Veterinary Medicine
                </div>
            </div>
        </div>
    </footer>
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/vue/vue.global.min.js"></script>
    <script src="~/lib/quasar/dist/quasar.umd.min.js"></script>
    <script asp-add-nonce="true">
        // define global Vue objects
        const { createApp, ref, computed, watch } = Vue;
        let vueSetup = {};
        let vueObjects = {};
        let vueMethods = {};
        let vueWatchers = {};
        let vueEmits = {};
        let vueProps = {};
        var vueBeforeCreateActions = [];
        var vueCreatedActions = [];
        var vueBeforeMountActions = [];
        var vueMountedActions = [];
        var vueBeforeUnmountActions = [];
        var vueUnmountedActions = [];
        var vueBeforeUpdateActions = [];
        var vueUpdatedActions = [];
    </script>

    @* Pages or controls can update the global VUE objects
    // BE SURE TO USE UNIQUE NAMES
    vueObjects.rapsCount = @Model.Count;
    vueMethods.rapsIncrementCount = function(){
    this.rapsCount = this.rapsCount + 1;
    var headers = {
    "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
    }
    $.ajax({
    type: "POST",
    url: 'RAPS?counter=' + this.rapsCount,
    headers:
    {
    "X-CSRF-TOKEN": $('input:hidden[name="__RequestVerificationToken"]').val()
    }
    });
    };
    vueWatchers.rapsCount = function(newCount, oldCount){
    alert("Value changed from " + oldCount + " to " + newCount);
    };
    vueMountedActions.push(function(){alert('Vue is mounted!')});
    *@
    @await RenderSectionAsync("Scripts", required: false)

    <script asp-add-nonce="true">

        // initialize VUE and Quasar using global objects
        createApp({
            setup(){
                return vueSetup
            },
            data() {
                return vueObjects
            },
            methods: vueMethods,
            watch: vueWatchers,
            emits: vueEmits,
            props: vueProps,
            beforeCreate() {
                while (vueBeforeCreateActions.length) {
                    vueBeforeCreateActions.shift().call();
                }
            },
            createded() {
                while (vueCreatedActions.length) {
                    vueCreatedActions.shift().call();
                }
            },
            beforeMount() {
                while (vueBeforeMountActions.length) {
                    vueBeforeMountActions.shift().call();
                }
            },
            mounted() {
                while (vueMountedActions.length) {
                    vueMountedActions.shift().call();
                }
            },
            beforeUpdate() {
                while (vueBeforeUpdateActions.length) {
                    vueBeforeUpdateActions.shift().call();
                }
            },
            updated() {
                while (vueUpdatedActions.length) {
                    vueUpdatedActions.shift().call();
                }
            },
            beforeUnmount() {
                while (vueBeforeUnmountActions.length) {
                    vueBeforeUnmountActions.shift().call();
                }
            },
            unmounted() {
                while (vueUnmountedActions.length) {
                    vueUnmountedActions.shift().call();
                }
            }
        }).use(Quasar).mount('body');

        @if (HttpHelper.Environment?.EnvironmentName == "Development")
        {
            <text>
            Quasar.setCssVar('primary', '#090');
            </text>
        }
        else if (HttpHelper.Environment?.EnvironmentName == "Test")
        {
            <text>
            Quasar.setCssVar('primary', '#D00');
            </text>
        }
        
    </script>

    @await RenderSectionAsync("FinalScripts", required: false)

</body>
</html>